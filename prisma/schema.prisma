generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  profileImg  String?
  solWalletId String?      @unique
  name        String?
  bountyId    String?
  sub         String       @unique
  bounties    Bounties[]
  prBounties  PrBounties[]
  solWallet   SolWallet?
}

model SolWallet {
  id               String @id @default(uuid())
  publicKey        String
  privateKey       String
  userid           String @unique
  user             User   @relation(fields: [userid], references: [id])
  CurrentBountyBal String @default("0")
  totalBountyGiven String @default("0")
}

model Bounties {
  id               String        @id @default(uuid())
  bountyAmount     String
  issueName        String
  ownerId          String
  issueNumber      String
  issueId          String
  issueDescription String        @default("")
  completed        Boolean
  githubRepoId     String
  githubRepoName   String        @default("")
  Winner           BountyWinner?

  owner                User          @relation(fields: [ownerId], references: [id])
  contributors         Contributor[] @relation("BountyContributors")
  issueLink            String?       @default("")
  issueProgrammingLang String?
}

model Contributor {
  id             String         @id @default(uuid())
  name           String
  profileImg     String
  email          String?
  sub            String         @unique
  totalBountyWon String         @default("0")
  bountyWinner   BountyWinner[]
  bounties       Bounties[]     @relation("BountyContributors")
}

model PrBounties {
  id               String @id @default(uuid())
  token            String @unique
  ownerId          String
  owner            User   @relation(fields: [ownerId], references: [id])
  bountyAmount     String
  prNumber         String
  prLink           String
  winnerSub        String
  walletPrivateKey String
}

enum Status {
  PAID
  PENDING
}

model BountyWinner {
  id                    String       @id @default(uuid())
  bountyAmount          String
  bountyId              String?      @unique
  Bounty                Bounties?    @relation(fields: [bountyId], references: [id])
  prNumber              String
  prLink                String
  name                  String
  winnerSub             String
  contributorId         String?      @unique
  contributor           Contributor? @relation(fields: [contributorId], references: [id])
  tokenPrefix           String
  profileImg            String
  walletPrivateKeyShard String
  walletPublicKey       String
  status                Status       @default(PAID)
  claimedAt             DateTime?
  encryptionKey         String
  encryptionIv          String
}
